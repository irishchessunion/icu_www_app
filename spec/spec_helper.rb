require 'capybara'
require 'webdrivers'
require 'capybara-lockstep'
# This file was generated by the `rails generate rspec:install` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# The generated `.rspec` file contains `--require spec_helper` which will cause this
# file to always be loaded, without a need to explicitly require it in any files.
#
# Given that it is always loaded, you are encouraged to keep this file as
# light-weight as possible. Requiring heavyweight dependencies from this file
# will add to the boot time of your test suite on EVERY test run, even for an
# individual file that may not need all of that loaded. Instead, make a
# separate helper file that requires this one and then use it only in the specs
# that actually need it.
#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
RSpec.configure do |config|
  # Many RSpec users commonly either run the entire suite or an individual
  # file, and it's useful to allow more verbose output when running an
  # individual spec file.
  # if config.files_to_run.one?
  #   # Use the documentation formatter for detailed output,
  #   # unless a formatter has already been configured
  #   # (e.g. via a command-line flag).
  #   config.default_formatter = 'doc'
  # end

  # Print the 10 slowest examples and example groups at the
  # end of the spec run, to help surface which specs are running
  # particularly slow.
  # config.profile_examples = 10

  # Set to random to run specs in random order to detect order dependencies.
  # If you find an order dependency and want to debug it, you can fix the
  # order by providing the seed, which is printed after each run.
  #     --seed 1234
  config.order = :defined

  # Seed global randomization in this process using the `--seed` CLI option.
  # Setting this allows you to use `--seed` to deterministically reproduce
  # test failures related to randomization by passing the same `--seed` value
  # as the one that triggered the failure.
  Kernel.srand config.seed

  # rspec-expectations config goes here. You can use an alternate
  # assertion/expectation library such as wrong or the stdlib/minitest
  # assertions if you prefer.
  config.expect_with :rspec do |expectations|
    # Enable only the newer, non-monkey-patching expect syntax.
    # For more details, see:
    #   - http://myronmars.to/n/dev-blog/2012/06/rspecs-new-expectation-syntax
    expectations.syntax = :expect
  end

  # rspec-mocks config goes here. You can use an alternate test double
  # library (such as bogus or mocha) by changing the `mock_with` option here.
  config.mock_with :rspec do |mocks|
    # Enable only the newer, non-monkey-patching expect syntax.
    # For more details, see:
    #   - http://teaisaweso.me/blog/2013/05/27/rspecs-new-message-expectation-syntax/
    mocks.syntax = :expect

    # Prevents you from mocking or stubbing a method that does not exist on
    # a real object. This is generally recommended.
    mocks.verify_partial_doubles = true
  end
  
  config.after(:suite) do
    FileUtils.rm_rf(Dir["#{Rails.root}/spec/test_files/"])
  end
end

if File.file?("/usr/bin/chromedriver")
  Selenium::WebDriver::Chrome::Service.driver_path = "/usr/bin/chromedriver"
elsif File.file?("/opt/homebrew/bin/chromedriver")
  # Support macintosh development
  Selenium::WebDriver::Chrome::Service.driver_path = "/opt/homebrew/bin/chromedriver"
else
  raise %Q{
  I can't find a chromedriver for the Selenium specs.
  You need to install one. It should be in either /usr/bin or /opt/homebrew/bin.
  }
end

Capybara.javascript_driver = :selenium_chrome_headless
Capybara.register_driver :selenium_chrome_headless do |app|
  options = ::Selenium::WebDriver::Chrome::Options.new

  options.exclude_switches << "enable-automation"

  # Recommended by Capybara-Lockstep gem
  options.add_preference("unhandled_prompt_behavior", 'ignore')

  # Disable Chrome's "Save address?" pop up
  options.add_preference("autofill.profile_enabled", false)

  # Disable Chrome's "Save password?" pop up
  options.add_preference("credentials_enable_service", false)
  options.add_preference("profile.password_manager_enabled", false)

  # Disable Chrome's "Save card?" pop up
  options.add_preference("autofill.credit_card_enabled", false)

  # Disable Chrome's "Chrome found the password you just used in a data breach..."
  options.add_preference('profile.password_manager_leak_detection', false)

  # Some of the specs get text from stripe that needs to be compared. Different developers
  # machines use different versions of English. The following line means that we should
  # only get messages from UK English on all development machines.
  options.add_preference("intl.accept_languages", 'en-GB')

  # Some machines will run the specs correctly in non-headless mode.
  # But to avoid flashing screens, leave the following line uncommented.
  options.add_argument('--headless')
  options.add_argument('--window-size=1920,1080')
  options.add_argument('--no-sandbox')
  # options.add_argument('--disable-dev-shm-usage')
  # options.add_argument("--remote-debugging-port=9222")
  Capybara::Selenium::Driver.new(app, :browser => :chrome, options: options)
  # Capybara::Selenium::Driver.new(app, :browser => :chrome)
end